# -*- coding: utf-8 -*-
"""RegressaoLinear.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KoySRs2BvQJvn81MTcm7yeR9CjpVI6XI
"""
## Importa a biblioteca
from numpy import *

## Define a classe Linear regrssion
class LinearRegression:
    ### Define a função __init__ responsável por estruturar o objeto da classe
    def __init__(self, x, y):
      self.x = x
      self.y = y
      self.__correlation_coefficient =  self.__correlacao()
      self.__inclination = self.__inclinacao()
      self.__intercept = self.__interceptacao()
    ### Calcula a correlação entre a variavei independente e a dependente
    def __correlacao(self):
      covariacao = cov(self.x, self.y, bias=True)[0][1]
      variancia_x = var(self.x)
      variancia_y = var(self.y)
      return covariacao / sqrt(variancia_x * variancia_y)
    ### Calcula a inclinação da linha de ajuste do modelo
    def __inclinacao(self):
      stdx = std(self.x)
      stdy = std(self.y)
      return self.__correlation_coefficient * (stdy / stdx)
    ### Calcula a interceptação da linha de ajuste do modelo com o eixo Y
    def __interceptacao(self):
      mediax = mean(self.x)
      mediay = mean(self.y)
      return mediay - mediax * self.__inclination
    ### Gera a previsão do modelo com base na inclinação e na interceptação
    def previsao(self,valor):
      return self.__intercept + (self.__inclination * valor)

## Treina o modelo
### Define as variaveis dependente e independente para o treinamento do modelo
x = array([1,2,3,4,5])
y = array([2,4,6,8,10])
### Instancia a classe para gerar o modelo
lr = LinearRegression(x,y)

## Gera a previsão
independente = int(input("Qual o numero que deseja processar? "))
previsao = lr.previsao(independente)
print(previsao)